name: CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      publish-prerelease:
        description: 'Publish pre-release versions to npm/PyPI'
        required: false
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  # Validate release-ready state
  validate:
    name: Validate Release-Ready State
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Node dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Verify package versions
        run: |
          TS_VERSION=$(node -p "require('./packages/flarelette-jwt-ts/package.json').version")
          PY_VERSION=$(python -c "import sys; sys.path.insert(0, 'packages/flarelette-jwt-py'); from flarelette_jwt import __version__; print(__version__)")
          echo "TypeScript version: $TS_VERSION"
          echo "Python version: $PY_VERSION"
          echo "✓ Versions verified (packages follow independent versioning)"

      - name: Build all packages
        run: |
          npm run build
          cd packages/flarelette-jwt-py && python prepare.py && python -m build

      - name: Verify TypeScript package metadata
        working-directory: packages/flarelette-jwt-ts
        run: |
          echo "Checking package.json..."
          node -e "
          const pkg = require('./package.json');
          if (!pkg.name) throw new Error('Missing name');
          if (!pkg.version) throw new Error('Missing version');
          if (!pkg.main) throw new Error('Missing main');
          if (!pkg.types) throw new Error('Missing types');
          if (!pkg.exports) throw new Error('Missing exports');
          console.log('✓ Package metadata valid');
          "

      - name: Verify Python package metadata
        working-directory: packages/flarelette-jwt-py
        run: |
          echo "Checking distribution..."
          twine check dist/*
          echo "✓ Python package metadata valid"

      - name: Check for uncommitted changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "❌ Uncommitted changes detected"
            git status
            exit 1
          fi
          echo "✓ No uncommitted changes"

      - name: Verify documentation is up to date
        run: |
          echo "Checking for required documentation..."
          test -f README.md || (echo "❌ Missing README.md" && exit 1)
          test -f CONTRIBUTING.md || (echo "❌ Missing CONTRIBUTING.md" && exit 1)
          test -f docs/getting-started.md || (echo "❌ Missing getting-started.md" && exit 1)
          test -f docs/core-concepts.md || (echo "❌ Missing core-concepts.md" && exit 1)
          test -f docs/usage-guide.md || (echo "❌ Missing usage-guide.md" && exit 1)
          test -f docs/security-guide.md || (echo "❌ Missing security-guide.md" && exit 1)
          echo "✓ All required documentation exists"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            packages/flarelette-jwt-ts/dist/
            packages/flarelette-jwt-py/dist/
          retention-days: 30

  # Pre-release publishing (optional, manual trigger only)
  publish-prerelease:
    name: Publish Pre-Release
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.publish-prerelease == 'true'
    environment: prerelease

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: npm ci

      - name: Install Python build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Get version and create pre-release tag
        id: version
        run: |
          VERSION=$(node -p "require('./packages/flarelette-jwt-ts/package.json').version")
          PRERELEASE_VERSION="${VERSION}-next.$(date +%s)"
          echo "prerelease_version=$PRERELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "Pre-release version: $PRERELEASE_VERSION"

      - name: Update package versions
        run: |
          cd packages/flarelette-jwt-ts
          npm version ${{ steps.version.outputs.prerelease_version }} --no-git-tag-version
          cd ../flarelette-jwt-py
          # Update Python version in __init__.py
          sed -i "s/__version__ = .*/__version__ = \"${{ steps.version.outputs.prerelease_version }}\"/" flarelette_jwt/__init__.py

      - name: Build packages
        run: |
          npm run build
          cd packages/flarelette-jwt-py && python prepare.py && python -m build

      - name: Publish TypeScript to npm (next tag)
        working-directory: packages/flarelette-jwt-ts
        run: npm publish --tag next --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish Python to PyPI (with pre-release classifier)
        working-directory: packages/flarelette-jwt-py
        run: python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}

      - name: Summary
        run: |
          echo "## Pre-Release Published 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.prerelease_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**TypeScript:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "npm install @chrislyons-dev/flarelette-jwt@next" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Python:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "pip install flarelette-jwt==${{ steps.version.outputs.prerelease_version }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
