name: Release Please

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      ts_release_created: ${{ steps.release.outputs['packages/flarelette-jwt-ts--release_created'] }}
      py_release_created: ${{ steps.release.outputs['packages/flarelette-jwt-py--release_created'] }}
      ts_tag_name: ${{ steps.release.outputs['packages/flarelette-jwt-ts--tag_name'] }}
      py_tag_name: ${{ steps.release.outputs['packages/flarelette-jwt-py--tag_name'] }}

    steps:
      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v4
        with:
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json

  publish-npm:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.ts_release_created }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript package
        run: npm run build

      - name: Publish to npm
        working-directory: packages/flarelette-jwt-ts
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-pypi:
    needs: release-please
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.py_release_created }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build Python package
        working-directory: packages/flarelette-jwt-py
        run: python -m build

      - name: Publish to PyPI
        working-directory: packages/flarelette-jwt-py
        run: python -m twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
